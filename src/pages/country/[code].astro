---
import { Image } from 'astro:assets'
import BaseLayout from '@/layouts/BaseLayout.astro'
import { getTourCardPage } from '@/lib/queries'
import { generateBreadcrumbSchema, generateDestinationSchema } from '@/lib/seo'
import HeroSlideshowOptimized from '@/components/HeroSlideshowOptimized.astro'
import PhotoGallery from '@/components/PhotoGallery'
import ContactForm from '@/components/ContactForm'

export const prerender = false

const { code } = Astro.params

const countries: Record<string, { name: string, description: string }> = {
  'albania': { 
    name: 'Albania', 
    description: 'The hidden gem of Europe with pristine beaches, rugged mountains, and ancient history.' 
  },
  'kosovo': { 
    name: 'Kosovo', 
    description: 'Europe\'s youngest nation with medieval monasteries, vibrant cities, and untouched nature.' 
  },
  'montenegro': { 
    name: 'Montenegro', 
    description: 'Wild beauty of the Adriatic with dramatic coastlines, deep canyons, and medieval towns.' 
  },
  'macedonia': { 
    name: 'North Macedonia', 
    description: 'Land of lakes, mountains, and ancient heritage at the crossroads of civilizations.' 
  },
  'bosnia': { 
    name: 'Bosnia & Herzegovina', 
    description: 'Where East meets West, with Ottoman heritage, stunning nature, and warm hospitality.' 
  },
  'croatia': { 
    name: 'Croatia', 
    description: 'Stunning Adriatic coastline, historic cities, and thousands of islands to explore.' 
  },
  'serbia': { 
    name: 'Serbia', 
    description: 'Vibrant culture, historic monasteries, and the mighty Danube River.' 
  },
  'greece': { 
    name: 'Greece', 
    description: 'Ancient wonders, island paradise, and the birthplace of Western civilization.' 
  }
}

const country = countries[code] || { name: 'Unknown', description: 'Explore tours in this region.' }

if (!countries[code]) {
  return Astro.redirect('/404')
}

// Get tours for this country
const tours = await getTourCardPage(
  { country: country.name },
  { page: 1, limit: 24, sort: 'popular' }
)

const breadcrumbs = generateBreadcrumbSchema([
  { name: 'Home', url: 'https://tours.albaniavisit.com' },
  { name: 'Destinations', url: 'https://tours.albaniavisit.com/tours' },
  { name: country.name, url: `https://tours.albaniavisit.com/country/${code}` }
])

const destinationSchema = generateDestinationSchema(
  country.name,
  country.description,
  tours.items,
  `https://tours.albaniavisit.com/country/${code}`
)

// Smart slideshow: Use UNIQUE images from actual tours in this country
const uniqueSlideshowMap = new Map()
tours.items.forEach(tour => {
  if (tour.primaryImageUrl && !uniqueSlideshowMap.has(tour.primaryImageUrl)) {
    uniqueSlideshowMap.set(tour.primaryImageUrl, {
      url: tour.primaryImageUrl,
      alt: `${tour.title} - ${tour.countries.join(', ')}`
    })
  }
})
const smartCountryImages = Array.from(uniqueSlideshowMap.values()).slice(0, 8)

// Fallback country-specific images for when there aren't enough tours
const countryFallbacks = {
  albania: [
    { url: '/Assets/Albania/Albanian_Riviera_Beach_Blue_Water.jpeg', alt: 'Albanian Riviera - Crystal Blue Waters' },
    { url: '/Assets/Albania/Accursed_Mountains.jpeg', alt: 'Accursed Mountains - Majestic Peaks' },
    { url: '/Assets/Albania/Northern_Albania_Shala_River.jpeg', alt: 'Shala River - Northern Albania Paradise' },
    { url: '/Assets/Albania/Albania_Coast.jpeg', alt: 'Albanian Coast - Endless Beauty' },
    { url: '/Assets/Albania/Valbona_Valley_Guesthouse.jpg', alt: 'Valbona Valley - Mountain Hospitality' },
    { url: '/Assets/Albania/Albania_Lake_Koman.jpeg', alt: 'Lake Koman - Hidden Fjords' },
    { url: '/Assets/Albania/Ali_Pasha_Fortress_Porto_Palermo.jpeg', alt: 'Ali Pasha Fortress - Porto Palermo' },
    { url: '/Assets/Albania/Albanian_Alps.jpg', alt: 'Albanian Alps - Majestic Wilderness' }
  ],
  kosovo: [
    { url: '/Assets/Kosovo/Gjeravica_Kosovo_336042834.jpeg', alt: 'Gjeravica Peak - Kosovo\'s Roof at 2,656m' },
    { url: '/Assets/Kosovo/Kosovo_329920270.jpeg', alt: 'The Untamed Beauty of Kosovo\'s Highlands' },
    { url: '/Assets/Kosovo/Kucisko_Lake_Kosovo_135448859.jpeg', alt: 'Kuçishte Lake - A Hidden Alpine Gem' },
    { url: '/Assets/Kosovo/Lac Leqinat Pejë Kosovo_220878090.jpeg', alt: 'Leqinat Lakes - Where Mountains Mirror the Sky' }
  ],
  montenegro: [
    { url: '/Assets/Montenegro/Kotor Montenegro_123711552.jpeg', alt: 'Bay of Kotor - Europe\'s Southernmost Fjord' },
    { url: '/Assets/Montenegro/Lovcen Mountains National park Montenegro_165889777.jpeg', alt: 'Lovćen Mountains - Montenegro\'s Black Mountain' },
    { url: '/Assets/Montenegro/Montenegro_216089172.jpeg', alt: 'Wild Beauty of Montenegro' },
    { url: '/Assets/Montenegro/Moracha Monastery Montenegro_382804243.jpeg', alt: 'Morača Monastery - Spiritual Heritage' }
  ],
  macedonia: [
    { url: '/Assets/North Macedonia/North Macedonia_456949808.jpeg', alt: 'North Macedonia - Land of Ancient Wonders' },
    { url: '/Assets/North Macedonia/Roman_Aquaduct_in_Macedonia_484708122.jpeg', alt: 'Roman Aqueduct - Living History' },
    { url: '/Assets/North Macedonia/Skopje Macedonia_230959493.jpeg', alt: 'Skopje - Where Old Meets New' },
    { url: '/Assets/North Macedonia/Skopje, Macedonia_607034892.jpeg', alt: 'Skopje Cityscape - Modern Macedonia' }
  ]
}

// Use smart images first, then fallback to country-specific images (no duplicates)
const fallbackForCountry = countryFallbacks[code] || countryFallbacks['albania']
const seenUrls = new Set(smartCountryImages.map(img => img.url))
const countrySlideshow = {
  [code]: [
    ...smartCountryImages,
    ...fallbackForCountry.filter(img => !seenUrls.has(img.url))
  ].slice(0, 8)
}

// Create unique gallery images from all tours in country
const uniqueCountryImages = new Map()
tours.items.forEach(tour => {
  if (tour.primaryImageUrl && !uniqueCountryImages.has(tour.primaryImageUrl)) {
    uniqueCountryImages.set(tour.primaryImageUrl, {
      url: tour.primaryImageUrl,
      alt: `${tour.title} - ${tour.countries.join(', ')}`
    })
  }
})
const galleryImages = Array.from(uniqueCountryImages.values())

// Default hero images for other countries
const heroImages = {
  albania: countryFallbacks.albania[0].url,
  kosovo: countryFallbacks.kosovo[0].url,
  montenegro: countryFallbacks.montenegro[0].url,
  macedonia: countryFallbacks.macedonia[0].url,
  bosnia: 'https://images.unsplash.com/photo-1558618047-71548e9a0b48?w=1920',
  croatia: 'https://images.unsplash.com/photo-1559157693-c34c0a6e5e3c?w=1920',
  serbia: 'https://images.unsplash.com/photo-1598266663439-2c0036d53f0d?w=1920',
  greece: 'https://images.unsplash.com/photo-1503152394-c571994fd383?w=1920'
}
---

<BaseLayout 
  title={`${country.name} Tours - AlbaniaVisit Tours`}
  description={`Explore ${country.name}: ${country.description}`}
  ogImage={heroImages[code]}
  jsonLd={[breadcrumbs, destinationSchema]}
>
  <!-- Hero Section with Ken Burns Slideshow -->
  <section class="relative h-[80vh] md:h-[75vh] min-h-[650px] flex items-center justify-center overflow-hidden">
    {countrySlideshow[code] ? (
      <HeroSlideshowOptimized 
        images={countrySlideshow[code]} 
        overlayIntensity="medium"
        slideDuration={5000}
        showCaptions={true}
      />
    ) : (
      <!-- Fallback static image for other countries -->
      <>
        <div class="absolute inset-0">
          <Image 
            src={heroImages[code]} 
            alt={country.name}
            width={1920}
            height={1080}
            class="w-full h-full object-cover"
            format="webp"
            quality={85}
          />
        </div>
        <div class="absolute inset-0 bg-gradient-to-br from-gray-900/60 via-gray-800/50 to-gray-900/55"></div>
        <div class="absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-black/20"></div>
      </>
    )}
    
    <div class="relative z-10 text-center text-white px-4 max-w-4xl mx-auto">
      <h1 class="text-[clamp(3.5rem,10vw,6rem)] md:text-[clamp(4.5rem,8vw,7rem)] font-bold leading-[1.1] tracking-wide mb-6" style="text-shadow: 2px 2px 8px rgba(0,0,0,0.8), 0 0 16px rgba(0,0,0,0.6), 1px 1px 3px rgba(0,0,0,1); letter-spacing: 0.02em;">
        {country.name}
      </h1>
      <p class="text-xl md:text-2xl max-w-3xl mx-auto drop-shadow-lg text-gray-100">
        {country.description}
      </p>
      
      {tours.items.length > 0 && (
        <div class="mt-8 flex justify-center gap-8 text-center">
          <div>
            <div class="text-3xl font-bold text-accent drop-shadow-lg">{tours.items.length}</div>
            <div class="text-sm text-gray-300">Available Tours</div>
          </div>
        </div>
      )}
    </div>
  </section>

  <div class="container mx-auto px-4 py-8">
    <!-- Breadcrumbs -->
    <nav class="mb-6">
      <ol class="flex items-center space-x-2 text-sm">
        <li><a href="/" class="text-gray-600 hover:text-gray-900">Home</a></li>
        <li class="text-gray-400">/</li>
        <li><a href="/tours" class="text-gray-600 hover:text-gray-900">Tours</a></li>
        <li class="text-gray-400">/</li>
        <li class="text-gray-900">{country.name}</li>
      </ol>
    </nav>

    <!-- Quick Stats - Only show real data -->
    {tours.pagination.total > 0 && (
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-12">
        <div class="bg-white rounded-lg p-4 text-center shadow">
          <div class="text-3xl font-bold text-gray-900">{tours.pagination.total}</div>
          <div class="text-sm text-gray-600">Available Tours</div>
        </div>
        
        {/* Find the lowest price from all tours */}
        {(() => {
          const prices = tours.items.filter(t => t.priceMin).map(t => t.priceMin);
          const lowestPrice = prices.length > 0 ? Math.min(...prices) : null;
          return lowestPrice && (
            <div class="bg-white rounded-lg p-4 text-center shadow">
              <div class="text-3xl font-bold text-accent">€{lowestPrice}</div>
              <div class="text-sm text-gray-600">Starting From</div>
            </div>
          );
        })()}
        
        {/* Count of activities/categories available */}
        {(() => {
          const categories = new Set(tours.items.flatMap(t => t.categories || []));
          return categories.size > 0 && (
            <div class="bg-white rounded-lg p-4 text-center shadow">
              <div class="text-3xl font-bold text-gray-900">{categories.size}</div>
              <div class="text-sm text-gray-600">Activity Types</div>
            </div>
          );
        })()}
        
        {/* Count unique tour operators */}
        {(() => {
          const operators = new Set(tours.items.map(t => t.operator?.name).filter(Boolean));
          return operators.size > 0 && (
            <div class="bg-white rounded-lg p-4 text-center shadow">
              <div class="text-3xl font-bold text-gray-900">{operators.size}+</div>
              <div class="text-sm text-gray-600">Tour Operators</div>
            </div>
          );
        })()}
      </div>
    )}

    <!-- Tours Section -->
    <div class="mb-12">
      <h2 class="text-3xl font-bold mb-8">Popular Tours in {country.name}</h2>
      
      {tours.items.length > 0 ? (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {tours.items.map((tour) => (
            <article class="bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition">
              <div class="aspect-[4/3] relative">
                <Image 
                  src={tour.primaryImageUrl} 
                  alt={tour.title}
                  width={400}
                  height={300}
                  loading="lazy"
                  class="w-full h-full object-cover"
                  format="webp"
                />
                {tour.featured && (
                  <span class="absolute top-4 left-4 bg-accent text-white p-2 rounded-full text-sm font-semibold">
                    Featured
                  </span>
                )}
                <span class="absolute bottom-4 left-4 bg-black/70 text-white p-1.5 rounded text-xs">
                  {tour.countries.join(' • ')}
                </span>
              </div>
              <div class="p-5">
                <h3 class="text-lg font-bold mb-2 line-clamp-2">
                  <a href={`/tours/${tour.slug}`} class="hover:text-accent">
                    {tour.title}
                  </a>
                </h3>
                <p class="text-sm text-gray-600 mb-3 line-clamp-2">
                  {tour.shortDescription}
                </p>
                <div class="flex items-center justify-between mb-3">
                  <div class="flex gap-2">
                    {tour.durationDisplay && (
                      <span class="text-xs bg-gray-100 p-1.5 rounded">
                        {tour.durationDisplay}
                      </span>
                    )}
                    {tour.difficulty && (
                      <span class="text-xs bg-gray-100 p-1.5 rounded capitalize">
                        {tour.difficulty}
                      </span>
                    )}
                  </div>
                  <span class="font-bold text-sm">
                    {tour.priceMin ? `€${tour.priceMin}` : 'Price on request'}
                  </span>
                </div>
                <a 
                  href={`/tours/${tour.slug}`}
                  class="flex items-center justify-center w-full bg-accent text-white p-3 rounded hover:bg-accent-600 transition text-sm font-medium min-h-[40px]"
                >
                  View Details
                </a>
              </div>
            </article>
          ))}
        </div>
      ) : (
        <div class="text-center py-12 bg-gray-50 rounded-lg">
          <p class="text-xl text-gray-600 mb-6">No tours available for {country.name} yet.</p>
          <a href="/tours" class="inline-flex items-center justify-center bg-accent text-white p-4 rounded-lg hover:bg-accent-600 transition font-medium min-h-[48px]">
            Browse All Tours
          </a>
        </div>
      )}
    </div>

    {tours.pagination.totalPages > 1 && (
      <div class="text-center mb-12">
        <a href={`/tours?country=${country.name}`} class="inline-block bg-gray-900 text-white p-4 rounded-lg hover:bg-gray-800 transition">
          View All {tours.pagination.total} Tours in {country.name}
        </a>
      </div>
    )}

    <!-- Travel Info -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
      <div class="bg-white rounded-lg p-6 shadow">
        <h3 class="font-bold mb-3 flex items-center gap-2">
          <svg class="w-5 h-5 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          Getting There
        </h3>
        <p class="text-sm text-gray-600">
          {code === 'albania' && (
            <>
              Fly into Tirana International Airport (TIA) with connections from major European cities.
              {' '}
              <a href="https://albaniavisit.com/travel-guide/tirana-international-airport/" 
                 class="text-accent hover:underline font-medium"
                 target="_blank"
                 rel="noopener">
                Learn more about the airport →
              </a>
            </>
          )}
          {code === 'kosovo' && 'Pristina International Airport (PRN) serves as the main gateway with direct flights from Europe.'}
          {code === 'montenegro' && 'Podgorica (TGD) and Tivat (TIV) airports offer easy access from European destinations.'}
          {code === 'macedonia' && 'Skopje International Airport (SKP) connects to major European hubs.'}
          {code === 'bosnia' && 'Sarajevo International Airport (SJJ) is the main entry point.'}
          {code === 'croatia' && 'Multiple airports including Zagreb, Split, and Dubrovnik serve international flights.'}
          {code === 'serbia' && 'Belgrade Nikola Tesla Airport (BEG) is the largest hub in the region.'}
          {code === 'greece' && 'Athens International Airport (ATH) and many island airports offer global connections.'}
        </p>
      </div>
      
      <div class="bg-white rounded-lg p-6 shadow">
        <h3 class="font-bold mb-3 flex items-center gap-2">
          <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"></path>
          </svg>
          Currency
        </h3>
        <p class="text-sm text-gray-600">
          {code === 'albania' && (
            <>
              Albanian Lek (ALL). Euro widely accepted in tourist areas. ATMs available in cities.
              {' '}
              <a href="https://albaniavisit.com/travel-guide/currency-lek/" 
                 class="text-accent hover:underline font-medium"
                 target="_blank"
                 rel="noopener">
                Currency guide →
              </a>
            </>
          )}
          {code === 'kosovo' && 'Euro (EUR) is the official currency. Cards accepted in cities.'}
          {code === 'montenegro' && 'Euro (EUR) is used throughout the country.'}
          {code === 'macedonia' && 'Macedonian Denar (MKD). Euro accepted in some tourist areas.'}
          {code === 'bosnia' && 'Convertible Mark (BAM) pegged to the Euro. Cards widely accepted.'}
          {code === 'croatia' && 'Euro (EUR) since 2023. Previously Croatian Kuna.'}
          {code === 'serbia' && 'Serbian Dinar (RSD). Euro accepted in some places.'}
          {code === 'greece' && 'Euro (EUR). Cards widely accepted everywhere.'}
        </p>
      </div>
      
      <div class="bg-white rounded-lg p-6 shadow">
        <h3 class="font-bold mb-3 flex items-center gap-2">
          <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          Best Time to Visit
        </h3>
        <p class="text-sm text-gray-600">
          {code === 'albania' && (
            <>
              May-September for beaches and hiking. April-June and September-October for mild weather.
              {' '}
              <a href="https://albaniavisit.com/travel-guide/best-time-to-visit-albania/" 
                 class="text-accent hover:underline font-medium"
                 target="_blank"
                 rel="noopener">
                Seasonal guide →
              </a>
            </>
          )}
          {code === 'kosovo' && 'May-September for outdoor activities. Winter for skiing in the Sharr Mountains.'}
          {code === 'montenegro' && 'June-September for coast and mountains. December-March for winter sports.'}
          {code === 'macedonia' && 'April-October for sightseeing. July-August can be hot. Winter for Mavrovo skiing.'}
          {code === 'bosnia' && 'May-September for general travel. Winter for skiing near Sarajevo.'}
          {code === 'croatia' && 'May-September for coast. April-May and September-October avoid crowds.'}
          {code === 'serbia' && 'April-October for sightseeing. Winter for mountain resorts.'}
          {code === 'greece' && 'April-October for islands. Spring and autumn ideal for mainland.'}
        </p>
      </div>
    </div>

    <!-- Neighboring Countries -->
    <div class="border-t pt-12 mb-12">
      <h2 class="text-2xl font-bold mb-8 text-center">Explore Neighboring Countries</h2>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {['albania', 'kosovo', 'montenegro', 'macedonia'].filter(c => c !== code).slice(0, 3).map(countryCode => (
          <a 
            href={`/country/${countryCode}`}
            class="group relative h-48 md:h-56 rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300"
          >
            <img 
              src={heroImages[countryCode]} 
              alt={countries[countryCode]?.name || countryCode}
              class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
            />
            <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent"></div>
            <div class="absolute bottom-0 left-0 right-0 p-6">
              <h3 class="text-xl font-bold text-white mb-1">{countries[countryCode]?.name || countryCode}</h3>
              <p class="text-sm text-gray-200 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                Explore tours →
              </p>
            </div>
          </a>
        ))}
      </div>
    </div>

    <!-- Compact Gallery - Only if we have images -->
    {galleryImages.length > 0 && (
      <PhotoGallery 
        client:load
        photos={galleryImages}
        title={`More from ${country.name}`}
        className="py-8"
      />
    )}
  </div>
  <!-- Contact Form Modal -->
  <ContactForm client:load />
</BaseLayout>