---
import BaseLayout from '@/layouts/BaseLayout.astro'
import { getTourCardPage } from '@/lib/queries'
import { generateBreadcrumbSchema, generateCollectionPageSchema } from '@/lib/seo'
import { getEnhancedTour, getBadgeEmoji } from '@/data/enhancedTours'
import FilterBar from '@/components/tours/FilterBar'
import BookingButton from '@/components/tours/BookingButton'
import InquiryForm from '@/components/tours/InquiryForm'
import HeroSlideshow from '@/components/HeroSlideshow.astro'
import PhotoGallery from '@/components/PhotoGallery'
import ContactForm from '@/components/ContactForm'
import { getHeroImagesByCategory } from '@/data/heroImages'

// Get initial tours (SSG)
const initialData = await getTourCardPage({}, { page: 1, limit: 12 })

const breadcrumbs = generateBreadcrumbSchema([
  { name: 'Home', url: 'https://tours.albaniavisit.com' },
  { name: 'All Tours', url: 'https://tours.albaniavisit.com/tours' }
])

const collectionSchema = generateCollectionPageSchema(
  'All Tours - Mountain Adventures in Albania & Balkans',
  `Browse ${initialData.pagination.total} handpicked tours across Albania, Kosovo, Montenegro and North Macedonia`,
  initialData.items,
  'https://tours.albaniavisit.com/tours'
)

// Smart slideshow: Use UNIQUE images from actual tours on this page
const uniqueSlideshowImages = new Map()
initialData.items.forEach(tour => {
  if (tour.primaryImageUrl && !uniqueSlideshowImages.has(tour.primaryImageUrl)) {
    uniqueSlideshowImages.set(tour.primaryImageUrl, {
      url: tour.primaryImageUrl,
      alt: `${tour.title} - ${tour.countries.join(', ')}`
    })
  }
})
const smartToursImages = Array.from(uniqueSlideshowImages.values()).slice(0, 8)

// Use our curated adventure images as fallbacks
const adventureImages = getHeroImagesByCategory('adventure')
const fallbackImages = adventureImages.map(img => ({
  url: img.optimizedSrc || img.src,
  alt: img.alt
}))

// Combine smart images with fallbacks, ensuring NO duplicates
const seenUrls = new Set(smartToursImages.map(img => img.url))
const toursHeroImages = [
  ...smartToursImages,
  ...fallbackImages.filter(img => !seenUrls.has(img.url))
].slice(0, 8)

// Create unique gallery images - get ALL tour images, no duplicates
const uniqueTourImages = new Map()
initialData.items.forEach(tour => {
  if (tour.primaryImageUrl && !uniqueTourImages.has(tour.primaryImageUrl)) {
    uniqueTourImages.set(tour.primaryImageUrl, {
      url: tour.primaryImageUrl,
      alt: `${tour.title} - ${tour.countries.join(', ')}`
    })
  }
})
const galleryImages = Array.from(uniqueTourImages.values()).slice(0, 12) // Limit to 12 unique images
---

<BaseLayout 
  title="Premium Mountain Tours in Albania & Balkans | AlbaniaVisit"
  description="Find and compare the best tours in Albania, Kosovo, Montenegro & Macedonia. Connect with trusted local operators for authentic adventures."
  ogImage="/Assets/Albania/Albanian_Alps.jpg"
  jsonLd={[breadcrumbs, collectionSchema]}
>
  <!-- Hero Section -->
  <section class="relative h-[80vh] min-h-[600px] flex items-center justify-center overflow-hidden">
    <HeroSlideshow images={toursHeroImages} overlayIntensity="medium" />
    
    <div class="relative z-10 text-center text-white px-4 max-w-4xl mx-auto">
      <h1 class="text-5xl md:text-6xl font-bold mb-6 drop-shadow-2xl">
        Explore the <span class="text-accent">Untamed Balkans</span>
      </h1>
      <p class="text-xl md:text-2xl text-gray-100 mb-8 drop-shadow-lg">
        {initialData.pagination.total} handpicked adventures across Albania's peaks, Kosovo's valleys, and Montenegro's wild coastlines
      </p>
      
      <!-- Quick Stats -->
      <div class="flex justify-center gap-8 text-center mb-8">
        <div>
          <div class="text-3xl font-bold text-accent drop-shadow-lg">{initialData.pagination.total}</div>
          <div class="text-sm text-gray-300">Active Tours</div>
        </div>
      </div>

      <!-- CTA -->
      <a href="#tours-grid" class="inline-flex items-center justify-center bg-accent hover:bg-accent-600 text-white px-8 py-4 rounded-full font-semibold text-lg transition-all transform hover:scale-105 shadow-2xl shadow-accent/20 hover:shadow-accent/30">
        <span>Browse All Tours</span>
        <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
        </svg>
      </a>
    </div>
  </section>

  <div class="container mx-auto px-4 py-12">
    <!-- Filter Bar -->
    <div class="mb-12">
      <FilterBar client:load />
    </div>

    <!-- Tours Grid -->
    <div id="tours-grid" class="scroll-mt-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12">
      {initialData.items.map((tour) => {
        const enhancedTour = getEnhancedTour(tour.slug);
        return (
          <article class="group bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden hover:shadow-xl hover:border-accent/20 transition-all duration-300 transform hover:-translate-y-2">
            {/* Image Container */}
            <div class="aspect-[4/3] relative overflow-hidden">
              <img 
                src={tour.primaryImageUrl} 
                alt={tour.title}
                loading="lazy"
                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-700"
              />
              
              {/* Enhanced Badges with Better Positioning */}
              {enhancedTour && enhancedTour.badges ? (
                <div class="absolute top-4 left-4 flex items-center gap-2 z-10">
                  <div class="bg-accent text-white px-3 py-1.5 rounded-lg text-xs font-bold uppercase tracking-wide shadow-lg backdrop-blur-sm flex items-center gap-2">
                    <span class="text-sm">{getBadgeEmoji(enhancedTour.badges[0])}</span>
                    {enhancedTour.badges[0]}
                  </div>
                </div>
              ) : tour.featured && (
                <div class="absolute top-4 left-4 bg-accent text-white px-3 py-1.5 rounded-lg text-xs font-bold uppercase tracking-wide shadow-lg backdrop-blur-sm z-10">
                  Featured
                </div>
              )}
            </div>
            
            {/* Content - Enhanced hierarchy */}
            <div class="p-6 space-y-4">
              {/* Enhanced Title & Description */}
              {enhancedTour ? (
                <div class="space-y-3">
                  <h2 class="text-xl font-bold mb-1 line-clamp-2 leading-tight">
                    <a href={`/tours/${tour.slug}`} class="hover:text-accent transition-colors group-hover:text-accent">
                      {enhancedTour.enhancedTitle}
                    </a>
                  </h2>
                  <p class="text-accent font-semibold text-sm tracking-wide uppercase">{enhancedTour.tagline}</p>
                  <p class="text-gray-600 text-sm leading-relaxed line-clamp-2">
                    {enhancedTour.heroDescription}
                  </p>
                </div>
              ) : (
                <div class="space-y-3">
                  <h2 class="text-xl font-bold mb-1 line-clamp-2 leading-tight">
                    <a href={`/tours/${tour.slug}`} class="hover:text-accent transition-colors group-hover:text-accent">
                      {tour.title}
                    </a>
                  </h2>
                  <p class="text-gray-600 text-sm leading-relaxed line-clamp-2">
                    {tour.shortDescription}
                  </p>
                </div>
              )}
              
              {/* Meta Info */}
              <div class="flex items-center justify-between mb-4">
                <div class="flex flex-wrap gap-2">
                  {tour.durationDisplay && (
                    <span class="inline-flex items-center gap-1 text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded-full whitespace-nowrap">
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                      {tour.durationDisplay}
                    </span>
                  )}
                  {tour.difficulty && (
                    <span class="inline-flex items-center gap-1 text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded-full capitalize whitespace-nowrap">
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                      </svg>
                      {tour.difficulty}
                    </span>
                  )}
                </div>
              </div>
              
              {/* Countries */}
              <div class="flex flex-wrap gap-1 mb-4">
                {tour.countries.slice(0, 2).map(country => (
                  <span class="text-xs bg-gray-50 text-gray-600 px-2 py-1 rounded border border-gray-200 whitespace-nowrap">
                    {country}
                  </span>
                ))}
                {tour.countries.length > 2 && (
                  <span class="text-xs bg-gray-50 text-gray-600 px-2 py-1 rounded border border-gray-200 whitespace-nowrap">
                    +{tour.countries.length - 2}
                  </span>
                )}
              </div>
              
              {/* Price & CTA */}
              <div class="flex items-baseline justify-between pt-4 border-t">
                <div class="flex items-baseline">
                  <span class="text-2xl font-bold text-gray-900">
                    {tour.priceMin ? `â‚¬${tour.priceMin}` : 'Price on request'}
                  </span>
                  {tour.priceMin && <span class="text-sm text-gray-500 ml-1">per person</span>}
                </div>
                <a 
                  href={`/tours/${tour.slug}`}
                  class="text-accent font-semibold hover:underline"
                >
                  View Details â†’
                </a>
              </div>
            </div>
          </article>
        );
      })}
    </div>

    <!-- Load More -->
    {initialData.pagination.total > 12 && (
      <div class="flex justify-center mt-8">
        <button 
          id="load-more"
          class="px-8 py-4 bg-accent text-white rounded-lg font-semibold hover:bg-accent-600 transition-all duration-300 transform hover:scale-105"
          data-page="1"
          data-total-pages={initialData.pagination.totalPages}
        >
          Load More Tours
        </button>
      </div>
    )}
  </div>

  <!-- Compact Photo Gallery - After main content -->
  {galleryImages.length > 0 && (
    <PhotoGallery 
      client:load
      photos={galleryImages}
      title="Tour Photo Gallery"
      className="py-8"
    />
  )}

  <!-- Bottom CTA -->
  <section class="bg-gray-50 py-16">
    <div class="container mx-auto px-4 text-center">
      <h2 class="text-3xl font-bold mb-4">Can't Find What You're Looking For?</h2>
      <p class="text-gray-600 mb-8 max-w-2xl mx-auto">
        Our team of local experts can help you plan the perfect custom adventure tailored to your interests and budget.
      </p>
      <button 
        id="custom-recommendations-btn"
        class="inline-block bg-accent text-white px-8 py-4 rounded-lg font-semibold hover:bg-accent-600 transition-all duration-300 transform hover:scale-105"
      >
        Get Custom Recommendations
      </button>
    </div>
  </section>

  <script>
    let currentPage = 1;
    let currentFilters = {};
    let isLoading = false;
    
    // Function to fetch more tours
    async function loadMoreTours() {
      console.log('Load More clicked');
      if (isLoading) return;
      
      const loadMoreBtn = document.getElementById('load-more') as HTMLButtonElement;
      if (!loadMoreBtn) {
        console.error('Load More button not found');
        return;
      }
      
      isLoading = true;
      const nextPage = currentPage + 1;
      
      // Update button to loading state
      loadMoreBtn.textContent = 'Loading...';
      loadMoreBtn.disabled = true;
      
      try {
        const params = new URLSearchParams({
          page: nextPage.toString(),
          limit: '12',
          ...currentFilters
        });
        
        console.log('Fetching:', `/api/tours?${params}`);
        const response = await fetch(`/api/tours?${params}`);
        const data = await response.json();
        console.log('Response:', data);
        
        if (data.success && data.data.items.length > 0) {
          appendToursToGrid(data.data.items);
          currentPage = nextPage;
          
          // Update or hide the load more button
          if (currentPage >= data.data.pagination.totalPages) {
            loadMoreBtn.style.display = 'none';
          } else {
            loadMoreBtn.textContent = 'Load More Tours';
            loadMoreBtn.disabled = false;
          }
        } else {
          console.log('No more tours or error:', data);
          loadMoreBtn.textContent = 'Load More Tours';
          loadMoreBtn.disabled = false;
        }
      } catch (error) {
        console.error('Error loading more tours:', error);
        loadMoreBtn.textContent = 'Load More Tours';
        loadMoreBtn.disabled = false;
      } finally {
        isLoading = false;
      }
    }
    
    // Function to append tours to the existing grid
    function appendToursToGrid(tours: any[]) {
      const toursGrid = document.getElementById('tours-grid');
      if (!toursGrid) return;
      
      tours.forEach((tour: any) => {
        const tourCard = createTourCard(tour, null);
        toursGrid.appendChild(tourCard);
      });
    }
    
    // Function to update the tours grid (replace all content)
    function updateToursGrid(tours: any[]) {
      const toursGrid = document.getElementById('tours-grid');
      if (!toursGrid) return;
      
      toursGrid.innerHTML = '';
      
      if (tours.length === 0) {
        toursGrid.innerHTML = `
          <div class="col-span-full text-center py-12">
            <p class="text-xl text-gray-600">No tours found.</p>
            <button onclick="location.reload()" class="mt-4 text-accent hover:underline">Clear filters and reload</button>
          </div>
        `;
        // Hide load more button when no tours
        const loadMoreBtn = document.getElementById('load-more');
        if (loadMoreBtn) loadMoreBtn.style.display = 'none';
        return;
      }
      
      tours.forEach((tour: any) => {
        const tourCard = createTourCard(tour, null);
        toursGrid.appendChild(tourCard);
      });
    }
    
    // Function to create a tour card element
    function createTourCard(tour: any, enhancedTour: any) {
      const tourCard = document.createElement('article');
      tourCard.className = 'group bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden hover:shadow-xl hover:border-accent/20 transition-all duration-300 transform hover:-translate-y-2';
      
      tourCard.innerHTML = `
        <div class="aspect-[4/3] relative overflow-hidden">
          <img 
            src="${tour.primaryImageUrl}" 
            alt="${tour.title}"
            loading="lazy"
            class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-700"
          />
          ${tour.featured ? `
            <div class="absolute top-4 left-4 bg-accent text-white px-3 py-1.5 rounded-lg text-xs font-bold uppercase tracking-wide shadow-lg backdrop-blur-sm z-10">
              Featured
            </div>
          ` : ''}
        </div>
        <div class="p-6 space-y-4">
          <div class="space-y-3">
            <h2 class="text-xl font-bold mb-1 line-clamp-2 leading-tight">
              <a href="/tours/${tour.slug}" class="hover:text-accent transition-colors group-hover:text-accent">
                ${tour.title}
              </a>
            </h2>
            <p class="text-gray-600 text-sm leading-relaxed line-clamp-2">
              ${tour.shortDescription}
            </p>
          </div>
          <div class="flex items-center justify-between mb-4">
            <div class="flex flex-wrap gap-2">
              ${tour.durationDisplay ? `
                <span class="inline-flex items-center gap-1 text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded-full whitespace-nowrap">
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  ${tour.durationDisplay}
                </span>
              ` : ''}
              ${tour.difficulty ? `
                <span class="inline-flex items-center gap-1 text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded-full capitalize whitespace-nowrap">
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                  </svg>
                  ${tour.difficulty}
                </span>
              ` : ''}
            </div>
          </div>
          <div class="flex flex-wrap gap-1 mb-4">
            ${tour.countries.slice(0, 2).map((country: string) => `
              <span class="text-xs bg-gray-50 text-gray-600 px-2 py-1 rounded border border-gray-200 whitespace-nowrap">
                ${country}
              </span>
            `).join('')}
            ${tour.countries.length > 2 ? `
              <span class="text-xs bg-gray-50 text-gray-600 px-2 py-1 rounded border border-gray-200 whitespace-nowrap">
                +${tour.countries.length - 2}
              </span>
            ` : ''}
          </div>
          <div class="flex items-baseline justify-between pt-4 border-t">
            <div class="flex items-baseline">
              <span class="text-2xl font-bold text-gray-900">
                ${tour.priceMin ? `â‚¬${tour.priceMin}` : 'Price on request'}
              </span>
              ${tour.priceMin ? '<span class="text-sm text-gray-500 ml-1">per person</span>' : ''}
            </div>
            <a href="/tours/${tour.slug}" class="text-accent font-semibold hover:underline">
              View Details â†’
            </a>
          </div>
        </div>
      `;
      
      return tourCard;
    }
    
    // Set up event handlers
    document.addEventListener('DOMContentLoaded', () => {
      console.log('DOM loaded, setting up handlers');
      
      // Load More button handler
      const loadMoreBtn = document.getElementById('load-more');
      if (loadMoreBtn) {
        console.log('Load More button found, adding listener');
        loadMoreBtn.addEventListener('click', loadMoreTours);
      } else {
        console.log('Load More button not found');
      }
      
      // Custom Recommendations button handler
      const customRecsBtn = document.getElementById('custom-recommendations-btn');
      if (customRecsBtn) {
        customRecsBtn.addEventListener('click', () => {
          // Try to find and click the inquiry button first
          const inquiryBtn = document.getElementById('inquiry-btn');
          if (inquiryBtn) {
            inquiryBtn.click();
          } else {
            // Fallback to dispatching the event
            window.dispatchEvent(new CustomEvent('open-inquiry-form'));
          }
        });
      }
    });
    
    // Listen for filter updates
    let hasReceivedFirstUpdate = false;
    window.addEventListener('tours-updated', async (event: any) => {
      // Skip the very first update if we already have tours rendered from server
      const toursGrid = document.getElementById('tours-grid');
      if (!hasReceivedFirstUpdate && toursGrid && toursGrid.children.length > 0) {
        hasReceivedFirstUpdate = true;
        // Just update the load more button state without clearing tours
        const data = event.detail;
        const loadMoreBtn = document.getElementById('load-more');
        if (loadMoreBtn && data.pagination) {
          if (data.pagination.totalPages > 1) {
            loadMoreBtn.style.display = 'block';
          } else {
            loadMoreBtn.style.display = 'none';
          }
        }
        return;
      }
      hasReceivedFirstUpdate = true;
      
      const data = event.detail;
      currentFilters = event.detail.filters || {};
      currentPage = 1; // Reset to first page when filters change
      
      updateToursGrid(data.items);
      
      // Show/hide load more button based on pagination
      const loadMoreBtn = document.getElementById('load-more');
      if (loadMoreBtn) {
        if (data.pagination.totalPages > 1) {
          loadMoreBtn.style.display = 'block';
          loadMoreBtn.textContent = 'Load More Tours';
          loadMoreBtn.disabled = false;
        } else {
          loadMoreBtn.style.display = 'none';
        }
      }
    });
  </script>
  
  <!-- Inquiry Form Modal -->
  <InquiryForm client:load />
  <!-- Contact Form Modal -->
  <ContactForm client:load />
</BaseLayout>