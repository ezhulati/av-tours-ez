---
import BaseLayout from '@/layouts/BaseLayout.astro'
import { getTourCardPage } from '@/lib/queries'
import { generateBreadcrumbSchema, generateCollectionPageSchema } from '@/lib/seo'
import { getEnhancedTour, getBadgeEmoji } from '@/data/enhancedTours'
import FilterBar from '@/components/tours/FilterBarOptimized'
import BookingButton from '@/components/tours/BookingButton'
import InquiryForm from '@/components/tours/InquiryForm'
import HeroSlideshow from '@/components/HeroSlideshow.astro'
import PhotoGallery from '@/components/PhotoGallery'
import ContactForm from '@/components/ContactForm'
import EUConsumerRights from '@/components/EUConsumerRights'
import SEOLandingLinks from '@/components/tours/SEOLandingLinks'
import { getHeroImagesByCategory } from '@/data/heroImages'
import { Image } from 'astro:assets'

// Get initial tours (SSG)
const initialData = await getTourCardPage({}, { page: 1, limit: 12 })

const breadcrumbs = generateBreadcrumbSchema([
  { name: 'Home', url: 'https://tours.albaniavisit.com' },
  { name: 'All Tours', url: 'https://tours.albaniavisit.com/tours' }
])

const collectionSchema = generateCollectionPageSchema(
  'All Tours - Mountain Adventures in Albania & Balkans',
  `Browse ${initialData.pagination.total} handpicked tours across Albania, Kosovo, Montenegro and North Macedonia`,
  initialData.items,
  'https://tours.albaniavisit.com/tours'
)

// Smart slideshow: Use UNIQUE images from actual tours on this page
const uniqueSlideshowImages = new Map()
initialData.items.forEach(tour => {
  if (tour.primaryImageUrl && !uniqueSlideshowImages.has(tour.primaryImageUrl)) {
    uniqueSlideshowImages.set(tour.primaryImageUrl, {
      url: tour.primaryImageUrl,
      alt: `${tour.title} - ${tour.countries.join(', ')}`
    })
  }
})
const smartToursImages = Array.from(uniqueSlideshowImages.values()).slice(0, 8)

// Use our curated adventure images as fallbacks
const adventureImages = getHeroImagesByCategory('adventure')
const fallbackImages = adventureImages.map(img => ({
  url: img.optimizedSrc || img.src,
  alt: img.alt
}))

// Combine smart images with fallbacks, ensuring NO duplicates
const seenUrls = new Set(smartToursImages.map(img => img.url))
const toursHeroImages = [
  ...smartToursImages,
  ...fallbackImages.filter(img => !seenUrls.has(img.url))
].slice(0, 8)

// Create unique gallery images - get ALL tour images, no duplicates
const uniqueTourImages = new Map()
initialData.items.forEach(tour => {
  if (tour.primaryImageUrl && !uniqueTourImages.has(tour.primaryImageUrl)) {
    uniqueTourImages.set(tour.primaryImageUrl, {
      url: tour.primaryImageUrl,
      alt: `${tour.title} - ${tour.countries.join(', ')}`
    })
  }
})
const galleryImages = Array.from(uniqueTourImages.values()).slice(0, 12) // Limit to 12 unique images
---

<BaseLayout 
  title="Premium Mountain Tours in Albania & Balkans | AlbaniaVisit"
  description="Find and compare the best tours in Albania, Kosovo, Montenegro & Macedonia. Connect with trusted local operators for authentic adventures."
  ogImage="/Assets/Albania/Albanian_Alps.jpg"
  jsonLd={[breadcrumbs, collectionSchema]}
>
  <!-- Hero Section -->
  <section class="relative h-[80vh] min-h-[600px] flex items-center justify-center overflow-hidden">
    <HeroSlideshow images={toursHeroImages} overlayIntensity="medium" />
    
    <div class="relative z-10 text-center text-white px-4 max-w-4xl mx-auto">
      <h1 class="text-[clamp(3rem,8vw,5rem)] md:text-[clamp(4rem,7vw,6rem)] font-bold leading-[1.1] tracking-wide mb-6" style="text-shadow: 2px 2px 8px rgba(0,0,0,0.8), 0 0 16px rgba(0,0,0,0.6), 1px 1px 3px rgba(0,0,0,1); letter-spacing: 0.02em;">
        Explore the <span class="text-accent">Untamed Balkans</span>
      </h1>
      <p class="text-xl md:text-2xl text-white mb-8" style="text-shadow: 1px 1px 6px rgba(0,0,0,0.8), 0 0 12px rgba(0,0,0,0.5), 1px 1px 2px rgba(0,0,0,1);">
        {initialData.pagination.total} handpicked adventures across Albania's peaks, Kosovo's valleys, and Montenegro's wild coastlines
      </p>
      
      <!-- Quick Stats -->
      <div class="flex justify-center gap-8 text-center mb-8">
        <div>
          <div class="text-3xl font-bold text-accent drop-shadow-lg">{initialData.pagination.total}</div>
          <div class="text-sm text-gray-300">Active Tours</div>
        </div>
      </div>

      <!-- CTA -->
      <a href="#tours-grid" class="inline-flex items-center justify-center bg-accent hover:bg-accent-600 text-white px-8 py-4 rounded-full font-semibold text-lg transition-all transform hover:scale-105 shadow-2xl shadow-accent/20 hover:shadow-accent/30">
        <span>Browse All Tours</span>
        <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
        </svg>
      </a>
    </div>
  </section>

  <div class="container mx-auto px-4 py-12">
    <!-- SEO Landing Links -->
    <SEOLandingLinks client:load />
    
    <!-- Filter Bar -->
    <div class="mb-12">
      <FilterBar client:load />
    </div>

    <!-- Tours Grid -->
    <div id="tours-grid" class="scroll-mt-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12">
      {initialData.items.map((tour) => {
        const enhancedTour = getEnhancedTour(tour.slug);
        return (
          <article data-testid="tour-card" class="group bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden hover:shadow-xl hover:border-accent/20 transition-all duration-300 transform hover:-translate-y-2 flex flex-col h-full">
            {/* Image Container */}
            <div class="aspect-[4/3] relative overflow-hidden flex-shrink-0">
              <Image 
                src={tour.primaryImageUrl} 
                alt={tour.title}
                loading="lazy"
                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-700"
                width={400}
                height={300}
                format="webp"
              />
              
              {/* Enhanced Badges - Smaller on Mobile */}
              {enhancedTour && enhancedTour.badges ? (
                <div class="absolute top-3 left-3 sm:top-4 sm:left-4 flex items-center gap-2 z-10">
                  <div class="bg-accent text-white px-2 sm:px-3 py-1 sm:py-1.5 rounded-md sm:rounded-lg text-[10px] sm:text-xs font-bold uppercase tracking-wide shadow-lg backdrop-blur-sm flex items-center gap-1 sm:gap-2">
                    <span class="hidden sm:inline text-sm">{getBadgeEmoji(enhancedTour.badges[0])}</span>
                    <span class="sm:hidden">{enhancedTour.badges[0].slice(0, 8)}</span>
                    <span class="hidden sm:inline">{enhancedTour.badges[0]}</span>
                  </div>
                </div>
              ) : tour.featured && (
                <div class="absolute top-3 left-3 sm:top-4 sm:left-4 bg-accent text-white px-2 sm:px-3 py-1 sm:py-1.5 rounded-md sm:rounded-lg text-[10px] sm:text-xs font-bold uppercase tracking-wide shadow-lg backdrop-blur-sm z-10">
                  Featured
                </div>
              )}
              
              {/* Subtle Trust Indicator - Smaller on Mobile */}
              <div class="absolute top-3 right-3 sm:top-4 sm:right-4 bg-white/90 sm:bg-white/95 backdrop-blur-sm px-2 sm:px-2.5 py-0.5 sm:py-1 rounded-md sm:rounded-lg shadow-sm flex items-center gap-0.5 sm:gap-1">
                <svg class="w-3 h-3 sm:w-3.5 sm:h-3.5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                </svg>
                <span class="text-[10px] sm:text-xs font-semibold text-gray-700">5.0</span>
              </div>
            </div>
            
            {/* Content - Symmetrical Layout */}
            <div class="p-6 flex flex-col flex-grow">
              {/* Title & Description - Fixed Height */}
              <div class="mb-4">
                <h2 class="text-xl font-bold mb-2 line-clamp-2 min-h-[3.5rem] leading-tight">
                  <a href={`/tours/${tour.slug}`} class="hover:text-accent transition-colors group-hover:text-accent">
                    {enhancedTour?.enhancedTitle || tour.title}
                  </a>
                </h2>
                {enhancedTour?.tagline && (
                  <p class="text-accent font-semibold text-sm tracking-wide uppercase mb-2">{enhancedTour.tagline}</p>
                )}
                <p class="text-gray-600 text-sm leading-relaxed line-clamp-2 min-h-[2.5rem]">
                  {enhancedTour?.heroDescription || tour.shortDescription || 'Discover the beauty of the Balkans on this unforgettable adventure.'}
                </p>
              </div>
              
              {/* Metadata Section - Fixed Height */}
              <div class="space-y-3 flex-grow mb-4">
                {/* Duration and Difficulty */}
                {(tour.durationDisplay || tour.difficulty) && (
                  <div class="flex flex-wrap gap-2">
                    {tour.durationDisplay && (
                      <span class="inline-flex items-center gap-1 text-xs bg-gray-100 text-gray-700 px-2.5 py-1 rounded-full whitespace-nowrap">
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        {tour.durationDisplay}
                      </span>
                    )}
                    {tour.difficulty && (
                      <span class="inline-flex items-center gap-1 text-xs bg-gray-100 text-gray-700 px-2.5 py-1 rounded-full capitalize whitespace-nowrap">
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                        </svg>
                        {tour.difficulty}
                      </span>
                    )}
                  </div>
                )}
                
                {/* Countries */}
                {tour.countries && tour.countries.length > 0 && (
                  <div class="flex flex-wrap gap-1.5">
                    {tour.countries.slice(0, 2).map(country => (
                      <span class="text-xs bg-gray-50 text-gray-600 px-2.5 py-1 rounded-md border border-gray-200 whitespace-nowrap">
                        {country}
                      </span>
                    ))}
                    {tour.countries.length > 2 && (
                      <span class="text-xs bg-gray-50 text-gray-600 px-2.5 py-1 rounded-md border border-gray-200 whitespace-nowrap">
                        +{tour.countries.length - 2}
                      </span>
                    )}
                  </div>
                )}
              </div>
              
              {/* Price & CTA - Always at Bottom */}
              <div class="pt-4 mt-auto border-t">
                <div class="flex items-baseline justify-between">
                  <span class={tour.priceMin ? "text-2xl font-bold text-gray-900" : "text-sm font-semibold text-gray-600"}>
                    {tour.priceMin ? `€${tour.priceMin}` : 'Price on request'}
                  </span>
                  <a 
                    href={`/tours/${tour.slug}`}
                    class="text-accent font-semibold hover:underline text-sm whitespace-nowrap"
                  >
                    View Details →
                  </a>
                </div>
                {tour.priceMin && (
                  <div class="text-xs text-gray-500 mt-1">per person</div>
                )}
              </div>
            </div>
          </article>
        );
      })}
    </div>

    <!-- Load More -->
    {initialData.pagination.total > 12 && (
      <div class="flex justify-center mt-8">
        <button 
          id="load-more"
          class="px-8 py-4 bg-accent text-white rounded-lg font-semibold hover:bg-accent-600 transition-all duration-300 transform hover:scale-105"
          data-page="1"
          data-total-pages={initialData.pagination.totalPages}
          type="button"
          aria-label="Load more tours"
        >
          Load More Tours
        </button>
      </div>
    )}
  </div>

  <!-- Compact Photo Gallery - After main content -->
  {galleryImages.length > 0 && (
    <PhotoGallery 
      client:load
      photos={galleryImages}
      title="Tour Photo Gallery"
      className="py-8"
    />
  )}

  <!-- Bottom CTA -->
  <section class="bg-gray-50 py-16">
    <div class="container mx-auto px-4 text-center">
      <h2 class="text-3xl font-bold mb-4">Can't Find What You're Looking For?</h2>
      <p class="text-gray-600 mb-8 max-w-2xl mx-auto">
        Our team of local experts can help you plan the perfect custom adventure tailored to your interests and budget.
      </p>
      <button 
        id="custom-recommendations-btn"
        class="inline-block bg-accent text-white px-8 py-4 rounded-lg font-semibold hover:bg-accent-600 transition-all duration-300 transform hover:scale-105"
        type="button"
        aria-label="Get custom tour recommendations"
      >
        Get Custom Recommendations
      </button>
    </div>
  </section>

  <!-- EU Consumer Rights Notice -->
  <section class="py-8">
    <div class="container mx-auto px-4">
      <EUConsumerRights client:load />
    </div>
  </section>

  <script>
    let currentPage = 1;
    let currentFilters = {};
    let currentSort = 'newest';
    let isLoading = false;
    let totalPages = 1;
    
    // Function to fetch more tours
    async function loadMoreTours() {
      console.log('Load More clicked');
      if (isLoading) return;
      
      const loadMoreBtn = document.getElementById('load-more') as HTMLButtonElement;
      if (!loadMoreBtn) {
        console.error('Load More button not found');
        return;
      }
      
      isLoading = true;
      const nextPage = currentPage + 1;
      
      // Update button to loading state
      loadMoreBtn.textContent = 'Loading...';
      loadMoreBtn.disabled = true;
      
      try {
        // Build params properly
        const params = new URLSearchParams();
        params.set('page', nextPage.toString());
        params.set('limit', '12');
        if (currentSort) params.set('sort', currentSort);
        
        // Add all active filters
        Object.entries(currentFilters).forEach(([key, value]) => {
          if (value !== undefined && value !== null && value !== '') {
            params.set(key, value.toString());
          }
        });
        
        console.log('Load More - Fetching:', `/api/tours?${params}`);
        const response = await fetch(`/api/tours?${params}`);
        const data = await response.json();
        console.log('Load More - Response:', data);
        
        if (data.items && data.items.length > 0) {
          appendToursToGrid(data.items);
          currentPage = nextPage;
          totalPages = data.pagination?.totalPages || 1;
          
          // Update or hide the load more button
          if (currentPage >= totalPages) {
            loadMoreBtn.style.display = 'none';
          } else {
            loadMoreBtn.textContent = 'Load More Tours';
            loadMoreBtn.disabled = false;
          }
        } else {
          console.log('No more tours');
          loadMoreBtn.style.display = 'none';
        }
      } catch (error) {
        console.error('Error loading more tours:', error);
        loadMoreBtn.textContent = 'Load More Tours';
        loadMoreBtn.disabled = false;
      } finally {
        isLoading = false;
      }
    }
    
    // Function to append tours to the existing grid
    function appendToursToGrid(tours: any[]) {
      const toursGrid = document.getElementById('tours-grid');
      if (!toursGrid) return;
      
      tours.forEach((tour: any) => {
        const tourCard = createTourCard(tour, null);
        toursGrid.appendChild(tourCard);
      });
    }
    
    // Function to update the tours grid (replace all content)
    function updateToursGrid(tours: any[]) {
      const toursGrid = document.getElementById('tours-grid');
      if (!toursGrid) return;
      
      toursGrid.innerHTML = '';
      
      if (tours.length === 0) {
        toursGrid.innerHTML = `
          <div class="col-span-full text-center py-12">
            <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <p class="text-xl text-gray-600 mb-2">No tours found matching your filters</p>
            <p class="text-sm text-gray-500 mb-4">Try adjusting your search criteria or clearing filters</p>
            <button onclick="window.location.href='/tours'" class="mt-2 px-4 py-2 bg-accent text-white rounded-lg hover:bg-accent-600 transition-colors">
              Clear all filters
            </button>
          </div>
        `;
        // Hide load more button when no tours
        const loadMoreBtn = document.getElementById('load-more');
        if (loadMoreBtn) loadMoreBtn.style.display = 'none';
        return;
      }
      
      tours.forEach((tour: any) => {
        const tourCard = createTourCard(tour, null);
        toursGrid.appendChild(tourCard);
      });
    }
    
    // Function to create a tour card element
    function createTourCard(tour: any, enhancedTour: any) {
      const tourCard = document.createElement('article');
      tourCard.className = 'group bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden hover:shadow-xl hover:border-accent/20 transition-all duration-300 transform hover:-translate-y-2 flex flex-col h-full';
      tourCard.setAttribute('data-testid', 'tour-card');
      
      tourCard.innerHTML = `
        <div class="aspect-[4/3] relative overflow-hidden flex-shrink-0">
          <img 
            src="${tour.primaryImageUrl}" 
            alt="${tour.title}"
            loading="lazy"
            class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-700"
          />
          ${tour.featured ? `
            <div class="absolute top-3 left-3 sm:top-4 sm:left-4 bg-accent text-white px-2 sm:px-3 py-1 sm:py-1.5 rounded-md sm:rounded-lg text-[10px] sm:text-xs font-bold uppercase tracking-wide shadow-lg backdrop-blur-sm z-10">
              Featured
            </div>
          ` : ''}
          
          <!-- Subtle Trust Indicator - Smaller on Mobile -->
          <div class="absolute top-3 right-3 sm:top-4 sm:right-4 bg-white/90 sm:bg-white/95 backdrop-blur-sm px-2 sm:px-2.5 py-0.5 sm:py-1 rounded-md sm:rounded-lg shadow-sm flex items-center gap-0.5 sm:gap-1">
            <svg class="w-3 h-3 sm:w-3.5 sm:h-3.5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
            </svg>
            <span class="text-[10px] sm:text-xs font-semibold text-gray-700">5.0</span>
          </div>
        </div>
        <div class="p-6 flex flex-col flex-grow">
          <!-- Title and Description - Fixed Height -->
          <div class="mb-4">
            <h2 class="text-xl font-bold mb-2 line-clamp-2 min-h-[3.5rem] leading-tight">
              <a href="/tours/${tour.slug}" class="hover:text-accent transition-colors group-hover:text-accent">
                ${tour.title}
              </a>
            </h2>
            <p class="text-gray-600 text-sm leading-relaxed line-clamp-2 min-h-[2.5rem]">
              ${tour.shortDescription || 'Discover the beauty of the Balkans on this unforgettable adventure.'}
            </p>
          </div>
          
          <!-- Metadata Section - Fixed Height -->
          <div class="space-y-3 flex-grow mb-4">
            ${(tour.durationDisplay || tour.difficulty) ? `
            <!-- Duration and Difficulty -->
            <div class="flex flex-wrap gap-2">
              ${tour.durationDisplay ? `
                <span class="inline-flex items-center gap-1 text-xs bg-gray-100 text-gray-700 px-2.5 py-1 rounded-full whitespace-nowrap">
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  ${tour.durationDisplay}
                </span>
              ` : ''}
              ${tour.difficulty ? `
                <span class="inline-flex items-center gap-1 text-xs bg-gray-100 text-gray-700 px-2.5 py-1 rounded-full capitalize whitespace-nowrap">
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                  </svg>
                  ${tour.difficulty}
                </span>
              ` : ''}
            </div>
            ` : ''}
            
            ${tour.countries && tour.countries.length > 0 ? `
            <!-- Countries -->
            <div class="flex flex-wrap gap-1.5">
              ${tour.countries.slice(0, 2).map((country: string) => `
                <span class="text-xs bg-gray-50 text-gray-600 px-2.5 py-1 rounded-md border border-gray-200 whitespace-nowrap">
                  ${country}
                </span>
              `).join('')}
              ${tour.countries.length > 2 ? `
                <span class="text-xs bg-gray-50 text-gray-600 px-2.5 py-1 rounded-md border border-gray-200 whitespace-nowrap">
                  +${tour.countries.length - 2}
                </span>
              ` : ''}
            </div>
            ` : ''}
          </div>
          
          <!-- Price and CTA - Always at Bottom -->
          <div class="pt-4 mt-auto border-t">
            <div class="flex items-baseline justify-between">
              <span class="${tour.priceMin ? 'text-2xl font-bold text-gray-900' : 'text-sm font-semibold text-gray-600'}">
                ${tour.priceMin ? `€${tour.priceMin}` : 'Price on request'}
              </span>
              <a href="/tours/${tour.slug}" class="text-accent font-semibold hover:underline text-sm whitespace-nowrap">
                View Details →
              </a>
            </div>
            ${tour.priceMin ? '<div class="text-xs text-gray-500 mt-1">per person</div>' : ''}
          </div>
      `;
      
      return tourCard;
    }
    
    // Set up event handlers
    document.addEventListener('DOMContentLoaded', () => {
      console.log('DOM loaded, setting up handlers');
      
      // Load More button handler
      const loadMoreBtn = document.getElementById('load-more');
      if (loadMoreBtn) {
        console.log('Load More button found, adding listener');
        loadMoreBtn.addEventListener('click', loadMoreTours);
      } else {
        console.log('Load More button not found');
      }
      
      // Custom Recommendations button handler
      const customRecsBtn = document.getElementById('custom-recommendations-btn');
      if (customRecsBtn) {
        customRecsBtn.addEventListener('click', () => {
          // Try to find and click the inquiry button first
          const inquiryBtn = document.getElementById('inquiry-btn');
          if (inquiryBtn) {
            inquiryBtn.click();
          } else {
            // Fallback to dispatching the event
            window.dispatchEvent(new CustomEvent('open-inquiry-form'));
          }
        });
      }
    });
    
    // Listen for filter updates
    let hasReceivedFirstUpdate = false;
    window.addEventListener('tours-updated', async (event: any) => {
      const data = event.detail;
      console.log('Tours updated event received:', data);
      
      // Always update if this is a filter update
      if (data.isFilterUpdate) {
        console.log('Processing filter update with', data.items?.length, 'tours');
        
        // Store filter parameters from the event
        if (data.filters) {
          // Convert filters to URL parameter format
          currentFilters = {};
          if (data.filters.country) currentFilters.country = data.filters.country;
          if (data.filters.category) currentFilters.category = data.filters.category;
          if (data.filters.difficulty) currentFilters.difficulty = data.filters.difficulty;
          if (data.filters.priceMin !== undefined) currentFilters.price_min = data.filters.priceMin;
          if (data.filters.priceMax !== undefined) currentFilters.price_max = data.filters.priceMax;
          if (data.filters.durationMin !== undefined) currentFilters.duration_min = data.filters.durationMin;
          if (data.filters.durationMax !== undefined) currentFilters.duration_max = data.filters.durationMax;
          if (data.filters.groupSize) currentFilters.group_size = data.filters.groupSize;
        }
        
        // Extract sort from URL or use default
        const urlParams = new URLSearchParams(window.location.search);
        currentSort = urlParams.get('sort') || 'newest';
        
        currentPage = 1; // Reset to first page when filters change
        
        // Always update the grid
        updateToursGrid(data.items || []);
        
        // Update pagination info
        if (data.pagination) {
          totalPages = data.pagination.totalPages || 1;
          console.log('Total pages:', totalPages, 'Current page:', currentPage);
        }
        
        // Show/hide load more button based on pagination
        const loadMoreBtn = document.getElementById('load-more');
        if (loadMoreBtn) {
          if (data.pagination && data.pagination.totalPages > 1) {
            loadMoreBtn.style.display = 'block';
            loadMoreBtn.textContent = 'Load More Tours';
            loadMoreBtn.disabled = false;
          } else {
            loadMoreBtn.style.display = 'none';
          }
        }
      } else if (!hasReceivedFirstUpdate) {
        // Skip the very first update if we already have tours rendered from server
        hasReceivedFirstUpdate = true;
        console.log('Skipping initial update - tours already rendered from server');
        const toursGrid = document.getElementById('tours-grid');
        if (toursGrid && toursGrid.children.length > 0) {
          // Just update the load more button state without clearing tours
          const loadMoreBtn = document.getElementById('load-more');
          if (loadMoreBtn && data.pagination) {
            totalPages = data.pagination.totalPages || 1;
            if (data.pagination.totalPages > 1) {
              loadMoreBtn.style.display = 'block';
            } else {
              loadMoreBtn.style.display = 'none';
            }
          }
          return;
        }
      }
    });
  </script>
  
  <!-- Inquiry Form Modal -->
  <InquiryForm client:load />
  <!-- Contact Form Modal -->
  <ContactForm client:load />
</BaseLayout>